{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import praw\n",
        "import requests\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import streamlit as st\n",
        "from textblob import TextBlob\n",
        "from datetime import datetime\n",
        "import json"
      ],
      "metadata": {
        "id": "QNVLz99RHuzu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "# Chartmetric API Credentials\n",
        "CHARTMETRIC_EMAIL = \"api5@measureofmusic.com\"\n",
        "CHARTMETRIC_PASSWORD = \"0d3;%%Ui7s$^\"\n",
        "\n",
        "def get_chartmetric_token():\n",
        "    url = \"https://api.chartmetric.com/api/token\"\n",
        "    payload = {\"refreshtoken\":\"vN8KMnKcclUa1xDJxXOkn0YROTxb8pSajbBLiRp2q9N2re371DTkZ0zhXoKyg1i9\"}\n",
        "    response = requests.post(url, json=payload)\n",
        "    if response.status_code == 200:\n",
        "        return response.json().get(\"token\")\n",
        "    return None"
      ],
      "metadata": {
        "id": "HuGP2XboAV6w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "token = get_chartmetric_token()\n",
        "\n",
        "# Check if the token is valid\n",
        "if not token:\n",
        "    print(\"Failed to retrieve Chartmetric token\")\n",
        "    exit()\n",
        "\n",
        "print(f\"Token retrieved successfully: token\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IIurjK4rA0Kt",
        "outputId": "f05f4624-f7e7-478c-89d0-338a6ab6ec68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Token retrieved successfully: token\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve Independent Artist data to add to Pitch It Platform\n",
        "#- Limitations: Less data for Independent and small artist however, this is where the social data comes into play.\n",
        "#The platform not only would intergrate social media stats but also, social media sites where fans talk about their favorite undercurrent\n",
        "#artists like reddit, articles, publications and more! This is done by creating a scarper that uses NLP and"
      ],
      "metadata": {
        "id": "EIW9EAVJc-9Y"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to fetch artist's top songs and streaming stats\n",
        "def get_artist_top_songs(artist_id, token):\n",
        "    url = f\"https://api.chartmetric.com/api/artist/{artist_id}/songs\"\n",
        "    headers = {\"Authorization\": f\"Bearer {token}\"}\n",
        "    response = requests.get(url, headers=headers)\n",
        "\n",
        "    if response.status_code == 200:\n",
        "        return response.json()  # Returns JSON data\n",
        "    else:\n",
        "        print(f\"Error fetching songs: {response.status_code}, {response.text}\")\n",
        "        return None\n",
        "\n",
        "# Function to fetch artist's social media stats\n",
        "def get_artist_social_stats(artist_id, token):\n",
        "    url = f\"https://api.chartmetric.com/api/artist/{artist_id}/social\"\n",
        "    headers = {\"Authorization\": f\"Bearer {token}\"}\n",
        "    response = requests.get(url, headers=headers)\n",
        "\n",
        "    if response.status_code == 200:\n",
        "        return response.json()  # Returns JSON data\n",
        "    else:\n",
        "        print(f\"Error fetching social media stats: {response.status_code}, {response.text}\")\n",
        "        return None"
      ],
      "metadata": {
        "id": "dgnXeqlVJsbd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to clean song data\n",
        "def clean_song_data(raw_data):\n",
        "    if not raw_data or 'data' not in raw_data:\n",
        "        print(\"Invalid song data\")\n",
        "        return None\n",
        "\n",
        "    songs_list = []\n",
        "    for song in raw_data['data']:\n",
        "        songs_list.append({\n",
        "            \"Song Title\": song.get(\"name\"),\n",
        "            \"Streams\": song.get(\"stream_count\"),\n",
        "            \"Platform\": song.get(\"platform\"),\n",
        "            \"Release Date\": song.get(\"release_date\")\n",
        "        })\n",
        "\n",
        "    return pd.DataFrame(songs_list)\n",
        "\n",
        "# Function to clean social media stats\n",
        "def clean_social_data(raw_data):\n",
        "    if not raw_data or 'data' not in raw_data:\n",
        "        print(\"Invalid social media data\")\n",
        "        return None\n",
        "\n",
        "    social_data = raw_data['data']\n",
        "    social_df = pd.DataFrame.from_dict(social_data, orient='index', columns=['Followers'])\n",
        "    social_df.reset_index(inplace=True)\n",
        "    social_df.rename(columns={'index': 'Platform'}, inplace=True)\n",
        "\n",
        "    return social_df"
      ],
      "metadata": {
        "id": "LZOqIT2FJsZB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to visualize song streaming numbers\n",
        "def visualize_song_streams(song_df):\n",
        "    if song_df is None or song_df.empty:\n",
        "        print(\"No song data available for visualization.\")\n",
        "        return\n",
        "\n",
        "    plt.figure(figsize=(10, 5))\n",
        "    sns.barplot(x=\"Streams\", y=\"Song Title\", data=song_df.sort_values(by=\"Streams\", ascending=False), palette=\"viridis\")\n",
        "    plt.xlabel(\"Number of Streams\")\n",
        "    plt.ylabel(\"Songs\")\n",
        "    plt.title(\"Top Songs by Streaming Numbers\")\n",
        "    plt.show()\n",
        "\n",
        "# Function to visualize social media followers\n",
        "def visualize_social_stats(social_df):\n",
        "    if social_df is None or social_df.empty:\n",
        "        print(\"No social media data available for visualization.\")\n",
        "        return\n",
        "\n",
        "    plt.figure(figsize=(8, 5))\n",
        "    sns.barplot(x=\"Platform\", y=\"Followers\", data=social_df, palette=\"coolwarm\")\n",
        "    plt.xlabel(\"Social Media Platform\")\n",
        "    plt.ylabel(\"Number of Followers\")\n",
        "    plt.title(\"Artist's Social Media Following\")\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "kfDlr8EEJsWi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Data Processing\n",
        "@st.cache_data\n",
        "def process_artist_data(artist_name):\n",
        "    subreddit_name = artist_name.lower().replace(\" \", \"\")\n",
        "    sentiment_df = get_reddit_sentiment(subreddit_name)\n",
        "    sentiment_avg = sentiment_df['sentiment'].mean()\n",
        "\n",
        "    # Example Artist ID for Chartmetric\n",
        "    artist_data = get_chartmetric_artist_data(123456)  # Replace with actual artist ID lookup\n",
        "\n",
        "    return sentiment_avg, artist_data\n",
        "\n",
        "# 4. Visualization\n",
        "@st.cache_data\n",
        "def plot_sentiment_distribution(sentiment_df):\n",
        "    plt.figure(figsize=(10, 5))\n",
        "    sns.histplot(sentiment_df['sentiment'], bins=20, kde=True, color='blue')\n",
        "    plt.xlabel(\"Sentiment Score\")\n",
        "    plt.ylabel(\"Frequency\")\n",
        "    plt.title(\"Reddit Sentiment Distribution\")\n",
        "    st.pyplot(plt)\n",
        "\n",
        "# 5. Streamlit UI\n",
        "st.title(\"Automated Artist Pitch Sheet Generator\")\n",
        "artist_name = st.text_input(\"Enter Artist Name:\")\n",
        "\n",
        "if st.button(\"Generate Report\"):\n",
        "    sentiment_avg, artist_data = process_artist_data(artist_name)\n",
        "    st.write(f\"Average Reddit Sentiment: {sentiment_avg:.2f}\")\n",
        "\n",
        "    if artist_data:\n",
        "        st.write(\"### Artist Stats from Chartmetric\")\n",
        "        st.json(artist_data)  # Display raw data (customize as needed)\n",
        "\n",
        "    sentiment_df = get_reddit_sentiment(artist_name)\n",
        "    plot_sentiment_distribution(sentiment_df)\n",
        "\n",
        "    st.download_button(\"Download Pitch Sheet\", \"Placeholder for PDF\", file_name=\"pitch_sheet.pdf\""
      ],
      "metadata": {
        "id": "-3XUGv2YCZlq"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
